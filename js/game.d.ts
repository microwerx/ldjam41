declare class Vector2 {
    x: number;
    y: number;
    constructor(x?: number, y?: number);
    copy(v: Vector2): Vector2;
    clone(): Vector2;
    reset(x: number, y: number): Vector2;
    add(v: Vector2): Vector2;
    sub(v: Vector2): Vector2;
    mul(multiplicand: number): Vector2;
    div(divisor: number): Vector2;
    neg(): Vector2;
    toFloat32Array(): Float32Array;
    toVector2(): Vector2;
    toVector3(): Vector3;
    toVector4(): Vector4;
    project(): number;
    length(): number;
    lengthSquared(): number;
    norm(): Vector2;
    static make(x: number, y: number): Vector2;
    static dot(v1: Vector2, v2: Vector2): number;
    static cross(a: Vector2, b: Vector2): number;
    static normalize(v: Vector2): Vector2;
}
declare class Vector3 {
    x: number;
    y: number;
    z: number;
    constructor(x?: number, y?: number, z?: number);
    copy(v: Vector3): Vector3;
    clone(): Vector3;
    reset(x?: number, y?: number, z?: number): Vector3;
    static makeFromSpherical(theta: number, phi: number): Vector3;
    static makeFromSphericalISO(rho: number, thetaInRadians: number, phiInRadians: number): Vector3;
    static makeFromSphericalMath(rho: number, thetaInRadians: number, phiInRadians: number): Vector3;
    setFromSpherical(theta: number, phi: number): Vector3;
    readonly theta: number;
    readonly phi: number;
    static make(x: number, y: number, z: number): Vector3;
    static makeUnit(x: number, y: number, z: number): Vector3;
    add(v: Vector3): Vector3;
    sub(v: Vector3): Vector3;
    mul(multiplicand: number): Vector3;
    div(divisor: number): Vector3;
    neg(): Vector3;
    reciprocal(): Vector3;
    pow(power: number): Vector3;
    compdiv(divisor: Vector3): Vector3;
    compmul(multiplicand: Vector3): Vector3;
    toArray(): number[];
    toFloat32Array(): Float32Array;
    toVector2(): Vector2;
    toVector4(w: number): Vector4;
    project(): Vector2;
    length(): number;
    lengthSquared(): number;
    norm(): Vector3;
    normalize(): Vector3;
    get(index: number): number;
    static dot(v1: Vector3, v2: Vector3): number;
    static cross(a: Vector3, b: Vector3): Vector3;
    static add(a: Vector3, b: Vector3): Vector3;
    static sub(a: Vector3, b: Vector3): Vector3;
    static mul(a: Vector3, b: Vector3): Vector3;
    static div(a: Vector3, b: Vector3): Vector3;
}
declare class Vector4 {
    x: number;
    y: number;
    z: number;
    w: number;
    constructor(x?: number, y?: number, z?: number, w?: number);
    copy(v: Vector4): Vector4;
    clone(): Vector4;
    reset(x?: number, y?: number, z?: number, w?: number): Vector4;
    add(v: Vector4): Vector4;
    sub(v: Vector4): Vector4;
    mul(multiplicand: number): Vector4;
    div(divisor: number): Vector4;
    neg(): Vector4;
    toFloat32Array(): Float32Array;
    toArray(): number[];
    toVector2(): Vector2;
    toVector3(): Vector3;
    project(): Vector3;
    length(): number;
    lengthSquared(): number;
    norm(): Vector4;
    static dot(v1: Vector4, v2: Vector4): number;
    static normalize(v: Vector4): Vector4;
    static make(x: number, y: number, z: number, w: number): Vector4;
    static makeUnit(x: number, y: number, z: number, w: number): Vector4;
}
declare class Matrix2 {
    m11: number;
    m21: number;
    m12: number;
    m22: number;
    constructor(m11: number, m21: number, m12: number, m22: number);
    static makeIdentity(): Matrix2;
    static makeZero(): Matrix2;
    static makeColMajor(m11: number, m21: number, m12: number, m22: number): Matrix2;
    static makeRowMajor(m11: number, m12: number, m21: number, m22: number): Matrix2;
    static fromRowMajorArray(v: number[]): Matrix2;
    static fromColMajorArray(v: number[]): Matrix2;
    static makeScale(x: number, y: number): Matrix2;
    static makeRotation(angleInDegrees: number, x: number, y: number, z: number): Matrix2;
    asColMajorArray(): number[];
    asRowMajorArray(): number[];
    static multiply(m1: Matrix2, m2: Matrix2): Matrix2;
    copy(m: Matrix2): Matrix2;
    concat(m: Matrix2): Matrix2;
    transform(v: Vector2): Vector2;
    asInverse(): Matrix2;
    asTranspose(): Matrix2;
}
declare class Matrix3 {
    m11: number;
    m21: number;
    m31: number;
    m12: number;
    m22: number;
    m32: number;
    m13: number;
    m23: number;
    m33: number;
    constructor(m11: number, m21: number, m31: number, m12: number, m22: number, m32: number, m13: number, m23: number, m33: number);
    static makeIdentity(): Matrix3;
    static makeZero(): Matrix3;
    static makeColMajor(m11: number, m21: number, m31: number, m12: number, m22: number, m32: number, m13: number, m23: number, m33: number): Matrix3;
    static makeRowMajor(m11: number, m12: number, m13: number, m21: number, m22: number, m23: number, m31: number, m32: number, m33: number): Matrix3;
    static fromRowMajorArray(v: number[]): Matrix3;
    static fromColMajorArray(v: number[]): Matrix3;
    static makeScale(x: number, y: number, z: number): Matrix3;
    static makeRotation(angleInDegrees: number, x: number, y: number, z: number): Matrix3;
    static makeCubeFaceMatrix(face: number): Matrix3;
    asColMajorArray(): number[];
    asRowMajorArray(): number[];
    static multiply(m1: Matrix3, m2: Matrix3): Matrix3;
    LoadIdentity(): Matrix3;
    MultMatrix(m: Matrix3): Matrix3;
    LoadColMajor(m11: number, m21: number, m31: number, m12: number, m22: number, m32: number, m13: number, m23: number, m33: number): Matrix3;
    LoadRowMajor(m11: number, m12: number, m13: number, m21: number, m22: number, m23: number, m31: number, m32: number, m33: number): Matrix3;
    toMatrix4(): Matrix4;
    copy(m: Matrix3): Matrix3;
    clone(): Matrix3;
    concat(m: Matrix3): Matrix3;
    transform(v: Vector3): Vector3;
    asInverse(): Matrix3;
    asTranspose(): Matrix3;
}
declare class Matrix4 {
    m11: number;
    m21: number;
    m31: number;
    m41: number;
    m12: number;
    m22: number;
    m32: number;
    m42: number;
    m13: number;
    m23: number;
    m33: number;
    m43: number;
    m14: number;
    m24: number;
    m34: number;
    m44: number;
    constructor(m11?: number, m21?: number, m31?: number, m41?: number, m12?: number, m22?: number, m32?: number, m42?: number, m13?: number, m23?: number, m33?: number, m43?: number, m14?: number, m24?: number, m34?: number, m44?: number);
    copy(m: Matrix4): Matrix4;
    clone(): Matrix4;
    row(i: number): Vector4;
    col(i: number): Vector4;
    row3(i: number): Vector3;
    col3(i: number): Vector3;
    diag3(): Vector3;
    LoadRowMajor(m11: number, m12: number, m13: number, m14: number, m21: number, m22: number, m23: number, m24: number, m31: number, m32: number, m33: number, m34: number, m41: number, m42: number, m43: number, m44: number): Matrix4;
    LoadColMajor(m11: number, m21: number, m31: number, m41: number, m12: number, m22: number, m32: number, m42: number, m13: number, m23: number, m33: number, m43: number, m14: number, m24: number, m34: number, m44: number): Matrix4;
    LoadIdentity(): Matrix4;
    Translate(x: number, y: number, z: number): Matrix4;
    Rotate(angleInDegrees: number, x: number, y: number, z: number): Matrix4;
    Scale(sx: number, sy: number, sz: number): Matrix4;
    LookAt(eye: Vector3, center: Vector3, up: Vector3): Matrix4;
    Frustum(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
    Ortho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
    Ortho2D(left: number, right: number, bottom: number, top: number): Matrix4;
    PerspectiveX(fovx: number, aspect: number, near: number, far: number): Matrix4;
    PerspectiveY(fovy: number, aspect: number, near: number, far: number): Matrix4;
    ShadowBias(): Matrix4;
    CubeFaceMatrix(face: number): Matrix4;
    static makeIdentity(): Matrix4;
    static makeZero(): Matrix4;
    static makeColMajor(m11: number, m21: number, m31: number, m41: number, m12: number, m22: number, m32: number, m42: number, m13: number, m23: number, m33: number, m43: number, m14: number, m24: number, m34: number, m44: number): Matrix4;
    static makeRowMajor(m11: number, m12: number, m13: number, m14: number, m21: number, m22: number, m23: number, m24: number, m31: number, m32: number, m33: number, m34: number, m41: number, m42: number, m43: number, m44: number): Matrix4;
    static fromRowMajorArray(v: number[]): Matrix4;
    static fromColMajorArray(v: number[]): Matrix4;
    static makeTranslation(x: number, y: number, z: number): Matrix4;
    static makeScale(x: number, y: number, z: number): Matrix4;
    static makeRotation(angleInDegrees: number, x: number, y: number, z: number): Matrix4;
    static makeOrtho(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
    static makeOrtho2D(left: number, right: number, bottom: number, top: number): Matrix4;
    static makeFrustum(left: number, right: number, bottom: number, top: number, near: number, far: number): Matrix4;
    static makePerspectiveY(fovy: number, aspect: number, near: number, far: number): Matrix4;
    static makePerspectiveX(fovx: number, aspect: number, near: number, far: number): Matrix4;
    static makeLookAt(eye: Vector3, center: Vector3, up: Vector3): Matrix4;
    static makeLookAt2(eye: Vector3, center: Vector3, up: Vector3): Matrix4;
    static makeShadowBias(): Matrix4;
    static makeCubeFaceMatrix(face: number): Matrix4;
    toColMajorArray(): number[];
    toRowMajorArray(): number[];
    static multiply3(a: Matrix4, b: Matrix4, c: Matrix4): Matrix4;
    static multiply(m1: Matrix4, m2: Matrix4): Matrix4;
    LoadMatrix(m: Matrix4): Matrix4;
    MultMatrix(m: Matrix4): Matrix4;
    transform(v: Vector4): Vector4;
    asInverse(): Matrix4;
    asTranspose(): Matrix4;
}
declare namespace GTE {
    function oscillate(t: number, frequency: number, phase: number, amplitude: number, offset: number): number;
    function oscillateBetween(t: number, frequency: number, phase: number, lowerLimit: number, upperLimit: number): number;
    function clamp(x: number, a: number, b: number): number;
    function lerp(a: number, b: number, x: number): number;
    function smoothstep(a: number, b: number, x: number): number;
    function smootherstep(a: number, b: number, x: number): number;
    function distancePointLine2(point: Vector2, linePoint1: Vector2, linePoint2: Vector2): number;
    function gaussian(x: number, center: number, sigma: number): number;
    function min3(a: number, b: number, c: number): number;
    function max3(a: number, b: number, c: number): number;
}
declare class GraphicsComponent {
    canvasElement: HTMLCanvasElement;
    readonly width: number;
    readonly height: number;
    context: CanvasRenderingContext2D;
    OAM: Sprite[];
    sprites: HTMLImageElement;
    private _spritesLoaded;
    private _fontPixelHeight;
    private _fontPixelHeightOver2;
    private _fontPixelSlantAdjust;
    constructor(canvasElement: HTMLCanvasElement);
    readonly spritesLoaded: boolean;
    readonly fontHeight: number;
    setFont(fontName: string, pixelHeight: number): void;
    clearScreen(color: string): void;
    loadSprites(url: string): void;
    setText(color: string, alignment: string): void;
    putText(text: string, x: number, y: number): void;
    putTextAligned(text: string, color: string, xloc: number, yloc: number, xo: number, yo: number): void;
    drawSprite(index: number, x: number, y: number): void;
    drawSprites(): void;
}
declare const KEY_BUTTON0 = 0;
declare const KEY_BUTTON1 = 1;
declare const KEY_BUTTON2 = 2;
declare const KEY_BUTTON3 = 3;
declare const KEY_BACK = 8;
declare const KEY_FORWARD = 9;
declare const KEY_SELECT = 8;
declare const KEY_START = 9;
declare const KEY_LEFT = 14;
declare const KEY_RIGHT = 15;
declare const KEY_UP = 12;
declare const KEY_DOWN = 13;
declare class InputComponent {
    buttons: number;
    constructor();
    setkey(which: number, state: boolean): void;
    getkey(which: number): boolean;
    onkeychange(e: KeyboardEvent, state: boolean): void;
}
declare class MusicComponent {
    musicElements: HTMLAudioElement[];
    currentPiece: number;
    lastPiece: number;
    private promises;
    constructor();
    load(url: string): void;
    play(which: number): boolean;
    update(tInSeconds: number): void;
    ended(index: number): boolean;
    stop(index: number): void;
    mute(index: number): void;
    fadeOut(index: number, amount: number): number;
    fadeIn(index: number, amount: number): number;
    setVolume(index: number, volume: number): void;
    getVolume(index: number): number;
}
declare class TimerComponent {
    dt: number;
    t0: number;
    t1: number;
    timers: Map<string, number>;
    constructor();
    update(tInSeconds: number): void;
    start(name: string, length: number): void;
    ended(name: string): boolean;
    timeleft(name: string): number;
}
declare class Toadfish {
    private _context;
    private _soundVolume;
    private _sounds;
    private _buffers;
    private _curbuffer;
    constructor();
    setSound(name: string, ab: AudioBuffer): void;
    setVolume(amount: number): void;
    playSound(name: string): void;
    queueSound(name: string, url: string): void;
}
declare class LibXOR {
    width: number;
    height: number;
    divElement: HTMLDivElement;
    canvasElement: HTMLCanvasElement;
    Graphics: GraphicsComponent;
    Input: InputComponent;
    Music: MusicComponent;
    Timers: TimerComponent;
    Sounds: Toadfish;
    constructor(width?: number, height?: number);
    update(tInSeconds: number): void;
    readonly dt: number;
    readonly t1: number;
    readonly t0: number;
}
declare class State {
    name: string;
    alt: string;
    delayTime: number;
    queueSound: string;
    queueMusic: string;
    constructor(name: string, alt?: string, delayTime?: number, queueSound?: string, queueMusic?: string);
}
declare class StateMachine {
    states: State[];
    private _t1;
    constructor();
    update(tInSeconds: number): void;
    push(name: string, alt: string, delayTime: number): void;
    pop(): void;
    readonly topName: string;
    readonly topAlt: string;
    readonly topTime: number;
}
declare class Game {
    XOR: LibXOR;
    series: string;
    title: string;
    author: string;
    askToQuit: boolean;
    gameover: boolean;
    gamelevel: number;
    score: number;
    states: StateMachine;
    constructor();
    run(): void;
    mainloop(t: number): void;
    load(): void;
    changelevel(which: number): void;
    statePause(): boolean;
    stateMainMenu(): boolean;
    checkGameModeAskToQuit(): boolean;
    stateAskToQuit(): boolean;
    getTimeredKey(key: number, delay?: number): boolean;
    update(tInSeconds: number): void;
    display(): void;
}
declare let game: Game;
declare class Sprite {
    index: number;
    x: number;
    y: number;
    offset: Vector2;
    position: Vector2;
    velocity: Vector2;
    random: number;
    timealive: number;
    enabled: boolean;
    alive: number;
    active: boolean;
    constructor(index: number);
    reset(x: number, y: number): void;
    update(dt: number): void;
    static Distance(sprite1: Sprite, sprite2: Sprite): number;
    static Collide(sprite1: Sprite, sprite2: Sprite, d: number): boolean;
}
declare namespace Brainfish {
    class Perceptron1Output {
        I: number[];
        w: number[];
        O: number;
        t: number;
        constructor(inputCount: number);
        compute(): number;
    }
    function CreatePerceptron1(count: number): Perceptron1Output;
    function CreateLogicPerceptron(w1: number, w2: number, t: number): Perceptron1Output;
    function CreateANDPerceptron(): Perceptron1Output;
    function CreateORPerceptron(): Perceptron1Output;
}
